from datetime import datetime
import json
import os

class ReportGenerator:
    def generate_html_report(self, results_data, candidate_name="Candidate"):
        """Generate professional HTML report"""
        
        ps = results_data['performance_summary']
        da = results_data['dimension_analysis']
        
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Interview Assessment Report - {candidate_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
        .header {{ text-align: center; border-bottom: 3px solid #2196F3; padding-bottom: 20px; }}
        .score {{ font-size: 3rem; font-weight: bold; color: #2196F3; }}
        .section {{ margin: 30px 0; }}
        .dimension {{ display: inline-block; margin: 10px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; width: 200px; text-align: center; }}
        .job {{ background: #f8f9fa; padding: 10px; margin: 5px 0; border-left: 4px solid #28a745; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Professional Interview Assessment Report</h1>
        <h2>{candidate_name}</h2>
        <p>Generated on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}</p>
    </div>
    
    <div class="section">
        <h2>Overall Performance</h2>
        <div class="score">{ps['overall_score']}/100</div>
        <h3>{ps['final_assessment']['level']}</h3>
        <p><strong>Readiness:</strong> {ps['final_assessment']['readiness']}</p>
        <p><strong>Timeline:</strong> {ps['final_assessment']['timeline']}</p>
    </div>
    
    <div class="section">
        <h2>Dimension Analysis</h2>
        <div>
            {self._generate_dimension_html(da)}
        </div>
    </div>
    
    <div class="section">
        <h2>Interview Details</h2>
        <table>
            <tr><th>Questions Completed</th><td>{results_data['interview_metadata']['total_questions']}</td></tr>
            <tr><th>Duration</th><td>{results_data['interview_metadata']['duration_minutes']} minutes</td></tr>
            <tr><th>Difficulty Level</th><td>{results_data['interview_metadata']['difficulty_level']}</td></tr>
        </table>
    </div>
    
    {self._generate_jobs_html(results_data.get('job_matches', []))}
    
    <div class="section">
        <h2>Detailed Question Analysis</h2>
        {self._generate_questions_html(results_data['detailed_evaluations'])}
    </div>
    
    <div class="section" style="margin-top: 50px; text-align: center; color: #666;">
        <p>Report generated by Professional Interview Assessment Platform</p>
    </div>
</body>
</html>"""
        
        return html_content
    
    def _generate_dimension_html(self, dimensions):
        html = ""
        for dim, score in dimensions.items():
            color = "#28a745" if score >= 80 else "#ffc107" if score >= 60 else "#dc3545"
            html += f"""
            <div class="dimension">
                <h4>{dim.replace('_', ' ').title()}</h4>
                <div style="font-size: 2rem; color: {color};">{score:.1f}</div>
            </div>"""
        return html
    
    def _generate_jobs_html(self, jobs):
        if not jobs:
            return ""
            
        html = '<div class="section"><h2>Recommended Opportunities</h2>'
        for job in jobs[:5]:
            html += f"""
            <div class="job">
                <h4>{job.get('title', 'Software Engineer Position')}</h4>
                <p>{job.get('company', 'Technology Company')}</p>
                {f"<p><strong>Match: {job['match_score']:.0f}%</strong></p>" if job.get('match_score') else ""}
            </div>"""
        html += '</div>'
        return html
    
    def _generate_questions_html(self, evaluations):
        html = ""
        for i, eval_data in enumerate(evaluations, 1):
            q = eval_data['question_data']['question']
            a = eval_data['answer'][:200] + "..." if len(eval_data['answer']) > 200 else eval_data['answer']
            score = eval_data['evaluation']['overall_score']
            feedback = eval_data['evaluation']['detailed_feedback']
            
            html += f"""
            <div style="border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px;">
                <h4>Question {i}</h4>
                <p><strong>Q:</strong> {q}</p>
                <p><strong>A:</strong> {a}</p>
                <p><strong>Score:</strong> {score}/100</p>
                <p><strong>Feedback:</strong> {feedback}</p>
            </div>"""
        return html
    
    def save_html_report(self, results_data, candidate_name="Candidate"):
        """Save HTML report to file"""
        html_content = self.generate_html_report(results_data, candidate_name)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"interview_report_{candidate_name}_{timestamp}.html"
        filepath = os.path.join('reports', filename)
        
        os.makedirs('reports', exist_ok=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        return filepath